version: "3.4"

services:
  api:
    container_name: api
    image: uneakproject-api:latest
    build:
      context: ./api
      target: api_stage
    depends_on:
      - database
    restart: unless-stopped
    volumes:
      - socket_data:/var/run/php
      - ./api:/srv/api:rw,cached
      - ./api/docker/php/conf.d/api-platform.dev.ini:/usr/local/etc/php/conf.d/api-platform.ini
      # if you develop on Linux, you may use a bind-mounted host directory instead
      # - ./api/var:/srv/api/var:rw
    healthcheck:
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-api-platform}:${POSTGRES_PASSWORD:-!ChangeMe!}@database:5432/${POSTGRES_DB:-api}?serverVersion=${POSTGRES_VERSION:-13}
      TRUSTED_PROXIES: ${TRUSTED_PROXIES:-127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16}
      TRUSTED_HOSTS: ^${SERVER_NAME:-example\.com|localhost}|caddy$$
      MERCURE_URL: ${CADDY_MERCURE_URL:-http://caddy/.well-known/mercure}
      MERCURE_PUBLIC_URL: https://${SERVER_NAME:-localhost}/.well-known/mercure
      MERCURE_JWT_SECRET: ${CADDY_MERCURE_JWT_SECRET:-!ChangeMe!}
    ports:
      - 9000:9000

  # web-backend:
  #   container_name: web-backend
  #   image: uneakproject-web-backend:latest
  #   build:
  #     context: ./web/backend
  #     target: pwa_dev_stage
  #   depends_on:
  #     - api
  #   environment:
  #     API_PLATFORM_CLIENT_GENERATOR_ENTRYPOINT: http://caddy
  #     NEXT_PUBLIC_ENTRYPOINT: http://caddy
  #   volumes:
  #     - ./web/backend:/usr/src/pwa:rw,cached

  # web-frontend:
  #   container_name: web-frontend
  #   image: uneakproject-web-frontend:latest
  #   build:
  #     context: ./web/frontend
  #     target: pwa_dev_stage
  #   depends_on:
  #     - api
  #   environment:
  #     API_PLATFORM_CLIENT_GENERATOR_ENTRYPOINT: http://caddy
  #     NEXT_PUBLIC_ENTRYPOINT: http://caddy
  #   volumes:
  #     - ./web/frontend:/usr/src/pwa:rw,cached

  caddy:
    container_name: caddy
    image: uneakproject-caddy:latest
    build:
      context: ./api
      target: caddy_stage
    depends_on:
      - api
      - web-backend
      - web-frontend
    environment:
      WEB_BACKEND_UPSTREAM: web-backend:3000
      WEB_FRONTEND_UPSTREAM: web-frontend:3000
      SERVER_NAME: ${SERVER_NAME:-localhost, caddy:80}
      MERCURE_PUBLISHER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeMe!}
      MERCURE_SUBSCRIBER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeMe!}
    restart: unless-stopped
    volumes:
      - socket_data:/var/run/php
      - caddy_data:/data
      - caddy_config:/config
      - ./api/docker/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - ./api:/srv/api:ro
    ports:
      # HTTP
      - target: 80
        published: ${HTTP_PORT:-80}
        protocol: tcp
      # HTTPS
      - target: 443
        published: ${HTTPS_PORT:-443}
        protocol: tcp
      # HTTP/3
      - target: 443
        published: ${HTTP3_PORT:-443}
        protocol: udp

  database:
    container_name: database
    image: postgres:${POSTGRES_VERSION:-13}-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-api}
      # You should definitely change the password in production
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-!ChangeMe!}
      - POSTGRES_USER=${POSTGRES_USER:-api-platform}
    volumes:
      - db_data:/var/lib/postgresql/data:rw
      # you may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./api/docker/db/data:/var/lib/postgresql/data:rw
    ports:
      - "5432:5432/tcp"

  # rabbitmq:
  #   container_name: rabbitmq
  #   image: "rabbitmq:${RABBITMQ_VERSION:-3.10.6}-management"
  #   hostname: "rabbitmq"
  #   environment:
  #     RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
  #     RABBITMQ_DEFAULT_USER: "rabbitmq"
  #     RABBITMQ_DEFAULT_PASS: "rabbitmq"
  #     RABBITMQ_DEFAULT_VHOST: "/"
  #   ports:
  #     - "15672:15672"
  #     - "5672:5672"
  #   labels:
  #     NAME: "rabbitmq"

  # # https://levelup.gitconnected.com/how-to-run-elasticsearch-8-on-docker-for-local-development-401fd3fff829
  # elasticsearch:
  #   image: elasticsearch:${ELASTICSEARCH_VERSION:-8.3.3}
  #   # image: "docker.elastic.co/elasticsearch/elasticsearch:${ELASTICSEARCH_VERSION:-8.3.3}"
  #   environment:
  #     - discovery.type=single-node
  #     - ES_JAVA_OPTS=-Xms1g -Xmx1g
  #     - xpack.security.enabled=false
  #   volumes:
  #     - elasticsearch_data:/usr/share/elasticsearch/data
  #   ports:
  #     - target: 9200
  #       published: 9200
  #   networks:
  #     - elastic

  # kibana:
  #   image: kibana:${KIBANA_VERSION:-8.3.3}
  #   ports:
  #     - target: 5601
  #       published: 5601
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #     - elastic


  # Mercure is installed as a Caddy module, prevent the Flex recipe from installing another service
  ###> symfony/mercure-bundle ###
  ###< symfony/mercure-bundle ###

  # networks:
  #   elastic:
  #     name: elastic
  #     driver: bridge

volumes:
  socket_data:
  caddy_data:
  caddy_config: # elasticsearch_data:

  ###> doctrine/doctrine-bundle ###
  db_data:
    ###< doctrine/doctrine-bundle ###
    ###> symfony/mercure-bundle ###
    ###< symfony/mercure-bundle ###
